/* eslint-disable global-require, quote-props, no-template-curly-in-string */
const raw = require('raw.macro');
/**
 * NOTE:
 * This file is automatically generated by the build process.
 * DO NOT CHANGE IT BY HAND or your changes will be lost.
 *
 * To change the format of this file, modify website/build/data.template.js
 */

const components = {
  accordion: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'accordion' */ '@autoit/accordion/dist/docs'),
    readme: () => raw('../node_modules/@autoit/accordion/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/accordion',
      props: [
        {
          description: '',
          displayName: 'AccordionComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The ID of this accordion',
            },
            title: {
              type: { name: 'string' },
              required: true,
              description:
                'The title to be displayed at the top of the accordion.',
            },
            children: {
              type: { name: 'node' },
              required: true,
              description: 'Content to be displayed inside the accordion.',
            },
            contentStyle: {
              type: { name: 'shape', value: '', computed: true },
              required: false,
              description: 'Custom styling for the accordion',
              defaultValue: { value: '{}', computed: false },
            },
          },
        },
      ],
    },
    key: 'accordion',
    name: '@autoit/accordion',
    packageName: '@autoit/accordion',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  actions: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'actions' */ '@autoit/actions/dist/docs'),
    readme: () => raw('../node_modules/@autoit/actions/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/actions',
      props: [
        {
          description: '',
          displayName: 'ActionsComponent',
          methods: [],
          props: {
            editClick: {
              type: { name: 'func' },
              required: false,
              description: 'Function called when the edit button is clicked.',
              defaultValue: { value: '() => {}', computed: false },
            },
            deleteClick: {
              type: { name: 'func' },
              required: false,
              description: 'Function called when the delete button is clicked.',
              defaultValue: { value: '() => {}', computed: false },
            },
            moreClick: {
              type: { name: 'func' },
              required: false,
              description: 'Function called when the more button is clicked.',
              defaultValue: { value: '() => {}', computed: false },
            },
            hideEdit: {
              type: { name: 'bool' },
              required: false,
              description: 'Specifies whether to hide or show the edit button.',
              defaultValue: { value: 'false', computed: false },
            },
            hideDelete: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to hide or show the delete button.',
              defaultValue: { value: 'false', computed: false },
            },
            hideMore: {
              type: { name: 'bool' },
              required: false,
              description: 'Specifies whether to hide or show the more button.',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'actions',
    name: '@autoit/actions',
    packageName: '@autoit/actions',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  button: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'button' */ '@autoit/button/dist/docs'),
    readme: () => raw('../node_modules/@autoit/button/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/button',
      props: [
        {
          description: '',
          displayName: 'ButtonComponent',
          methods: [],
          props: {
            text: {
              type: {
                name: 'custom',
                raw:
                  "(props, propName, componentName) => {\n  if (!props.text && !props.children) {\n    return new Error(\n      `One of the props 'text' or 'children' was not specified in ${componentName}.`\n    );\n  }\n  return null;\n}",
              },
              required: false,
              description: 'Text to be displayed on the botton.',
              defaultValue: { value: '""', computed: false },
            },
            children: {
              type: {
                name: 'custom',
                raw:
                  "(props, propName, componentName) => {\n  if (!props.text && !props.children) {\n    return new Error(\n      `One of the props 'text' or 'children' was not specified in ${componentName}.`\n    );\n  }\n  return null;\n}",
              },
              required: false,
              description: 'Children to be placed inside the button element.',
              defaultValue: { value: 'null', computed: false },
            },
            clear: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the button should have a color or not.',
              defaultValue: { value: 'false', computed: false },
            },
            onClick: {
              type: { name: 'func' },
              required: false,
              description:
                'Function that gets called when the button is clicked.',
              defaultValue: { value: '() => {}', computed: false },
            },
            disabled: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether or not the button should be disabled. Defaults to false',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'button',
    name: '@autoit/button',
    packageName: '@autoit/button',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  card: {
    description: 'No description added',
    docs: () => import(/* webpackChunkName: 'card' */ '@autoit/card/dist/docs'),
    readme: () => raw('../node_modules/@autoit/card/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/card',
      props: [
        {
          description: '',
          displayName: 'CardComponent',
          methods: [],
          props: {
            children: {
              type: { name: 'node' },
              required: true,
              description: 'Children to be displayed inside the component.',
            },
          },
        },
      ],
    },
    key: 'card',
    name: '@autoit/card',
    packageName: '@autoit/card',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  checkbox: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'checkbox' */ '@autoit/checkbox/dist/docs'),
    readme: () => raw('../node_modules/@autoit/checkbox/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/checkbox',
      props: [
        {
          description: '',
          displayName: 'CheckBoxComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'ID for this checkbox.',
            },
            label: {
              type: { name: 'string' },
              required: true,
              description: 'Label to display after checkbox',
            },
            checked: {
              type: { name: 'bool' },
              required: true,
              description: 'Checked value of this checkbox.',
            },
            onClick: {
              type: { name: 'func' },
              required: true,
              description: 'Function to run when checkbox is clicked.',
            },
            color: {
              type: { name: 'bool' },
              required: true,
              description:
                'Change checkbox color (kept default theme) on for publication page.',
            },
          },
        },
      ],
    },
    key: 'checkbox',
    name: '@autoit/checkbox',
    packageName: '@autoit/checkbox',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  dateField: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'dateField' */ '@autoit/dateField/dist/docs'),
    readme: () => raw('../node_modules/@autoit/dateField/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/dateField',
      props: [
        {
          description: '',
          displayName: 'DateFieldComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The id attribute for the DOM.',
            },
            disabled: {
              type: { name: 'bool' },
              required: false,
              description: 'Set the input to disabled state.',
              defaultValue: { value: 'false', computed: false },
            },
            label: {
              type: { name: 'string' },
              required: false,
              description: 'The field label.',
              defaultValue: { value: 'null', computed: false },
            },
            labelSize: {
              type: {
                name: 'enum',
                value: [
                  { value: '"regular"', computed: false },
                  { value: '"large"', computed: false },
                ],
              },
              required: false,
              description: 'The size of the field label.',
              defaultValue: { value: '"regular"', computed: false },
            },
            subLabel: {
              type: { name: 'string' },
              required: false,
              description:
                'Text displayed below the field to provide more context or usage guidance if required.',
              defaultValue: { value: 'null', computed: false },
            },
            showSubLabel: {
              type: { name: 'bool' },
              required: false,
              description: 'Bool to show the subLabel or not.',
              defaultValue: { value: 'false', computed: false },
            },
            appearance: {
              type: {
                name: 'enum',
                value: [{ value: '"box-rounded"', computed: false }],
              },
              required: false,
              description:
                'The appearance of the input field, presently only box-rounded is supported.',
              defaultValue: { value: 'null', computed: false },
            },
            variant: {
              type: {
                name: 'enum',
                value: [
                  { value: '"internal"', computed: false },
                  { value: '"external"', computed: false },
                ],
              },
              required: false,
              description:
                'Internal or external variance, only changes the colour of the label slightly, will likely be deprecated in design reviews.',
              defaultValue: { value: '"internal"', computed: false },
            },
            size: {
              type: {
                name: 'enum',
                value: [
                  { value: '"small"', computed: false },
                  { value: '"regular"', computed: false },
                  { value: '"large"', computed: false },
                ],
              },
              required: false,
              description:
                'The size of the field, matches up with buttons and other input fields. Small is for saving space in complex interfaces, regular for most uses, and large for important fields that require more user attention.',
              defaultValue: { value: '"small"', computed: false },
            },
            name: {
              type: { name: 'string' },
              required: false,
              description:
                'When nested in FormSection, returns the name prop prefixed with the FormSection name. Otherwise, returns the name prop that you passed in.',
              defaultValue: { value: '""', computed: false },
            },
            onBlur: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field loses focus. It expects to either receive the React SyntheticEvent _or_ the current value of the field.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field is changed. It expects to either receive the React SyntheticEvent _or_ the new value of the field.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onFocus: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field receives focus.',
              defaultValue: { value: '() => {}', computed: false },
            },
            value: {
              type: { name: 'string' },
              required: false,
              description:
                'The value of this form field. It will be a boolean for checkboxes, and a string for all other input types.',
              defaultValue: { value: '""', computed: false },
            },
            placeholder: {
              type: { name: 'string' },
              required: false,
              description:
                'The placeholder of this form field. It will be a string.',
              defaultValue: { value: '""', computed: false },
            },
            year: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether or not this date field is just the year value.',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'dateField',
    name: '@autoit/dateField',
    packageName: '@autoit/dateField',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  dropDown: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'dropDown' */ '@autoit/dropDown/dist/docs'),
    readme: () => raw('../node_modules/@autoit/dropDown/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/dropDown',
      props: [
        {
          description: '',
          displayName: 'DropDownComponent',
          methods: [],
          props: {
            label: {
              type: { name: 'string' },
              required: true,
              description: 'The label to go above the field.',
            },
            disabled: {
              type: { name: 'bool' },
              required: false,
              description: 'Boolean to determine if this field is disabled.',
              defaultValue: { value: 'false', computed: false },
            },
            id: {
              type: { name: 'string' },
              required: true,
              description: 'Id to be assigned to this field.',
            },
            options: {
              type: {
                name: 'arrayOf',
                value: {
                  name: 'shape',
                  value: {
                    value: { name: 'number', required: false },
                    label: { name: 'string', required: false },
                  },
                },
              },
              required: true,
              description: 'Selectable options for dropdown.',
            },
            value: {
              type: {
                name: 'shape',
                value: {
                  value: { name: 'number', required: false },
                  label: { name: 'string', required: false },
                },
              },
              required: false,
              description: 'Preselected value for the dropdown.',
              defaultValue: { value: 'null', computed: false },
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description: 'Function called on change of value.',
              defaultValue: { value: '() => {}', computed: false },
            },
            style: {
              type: { name: 'shape', value: {} },
              required: false,
              description: 'Used to modify the style of the component',
              defaultValue: { value: '{}', computed: false },
            },
            isMulti: {
              type: { name: 'bool' },
              required: false,
              description:
                'Used to specify if we are allowing the user to select multiple options',
              defaultValue: { value: 'false', computed: false },
            },
            creatable: {
              type: { name: 'bool' },
              required: false,
              description:
                'Used to define if the user is allowed to choose their own option.',
              defaultValue: { value: 'false', computed: false },
            },
            handleCreate: {
              type: { name: 'func' },
              required: false,
              description:
                'Function used to handle the creation of a new value',
              defaultValue: { value: '() => {}', computed: false },
            },
          },
        },
      ],
    },
    key: 'dropDown',
    name: '@autoit/dropDown',
    packageName: '@autoit/dropDown',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'react-select': '^3.1.0', 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/plugin-transform-runtime': '^7.2.0',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
    },
  },

  icon: {
    description: 'No description added',
    docs: () => import(/* webpackChunkName: 'icon' */ '@autoit/icon/dist/docs'),
    readme: () => raw('../node_modules/@autoit/icon/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/icon',
      props: [
        {
          description: '',
          displayName: 'IconComponent',
          methods: [],
          props: {
            name: {
              type: {
                name: 'enum',
                value: [
                  { value: "'house'", computed: false },
                  { value: "'add'", computed: false },
                  { value: "'search'", computed: false },
                  { value: "'cog'", computed: false },
                  { value: "'edit'", computed: false },
                  { value: "'more'", computed: false },
                  { value: "'filter'", computed: false },
                  { value: "'error'", computed: false },
                  { value: "'delete'", computed: false },
                  { value: "'mypage'", computed: false },
                  { value: "'logout'", computed: false },
                  { value: "'book'", computed: false },
                  { value: "'up'", computed: false },
                  { value: "'down'", computed: false },
                ],
              },
              required: false,
              description: 'Name of the ICON you wish to use.',
            },
          },
        },
      ],
    },
    key: 'icon',
    name: '@autoit/icon',
    packageName: '@autoit/icon',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  image: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'image' */ '@autoit/image/dist/docs'),
    readme: () => raw('../node_modules/@autoit/image/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/image',
      props: [
        {
          description: '',
          displayName: 'ImageComponent',
          methods: [],
          props: {
            square: {
              type: { name: 'bool' },
              required: false,
              description: '',
              defaultValue: { value: 'false', computed: false },
            },
            border: {
              type: { name: 'bool' },
              required: false,
              description: '',
              defaultValue: { value: 'false', computed: false },
            },
            large: {
              type: { name: 'bool' },
              required: false,
              description: '',
              defaultValue: { value: 'false', computed: false },
            },
            margin: {
              type: { name: 'bool' },
              required: false,
              description: '',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'image',
    name: '@autoit/image',
    packageName: '@autoit/image',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  imageInput: {
    description: 'No description added',
    docs: () =>
      import(
        /* webpackChunkName: 'imageInput' */ '@autoit/imageInput/dist/docs'
      ),
    readme: () => raw('../node_modules/@autoit/imageInput/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/imageInput',
      props: [
        {
          description: '',
          displayName: 'ImageInputComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The ID of this image upload area.',
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description: 'Function to be called when the value changes.',
              defaultValue: { value: '() => {}', computed: false },
            },
            multiple: {
              type: { name: 'bool' },
              required: false,
              description: 'To allow multiple images to be uploaded or not.',
              defaultValue: { value: 'true', computed: false },
            },
            maxNumber: {
              type: { name: 'number' },
              required: false,
              description: 'Maximum number of images allowed to be uploaded.',
              defaultValue: { value: '8', computed: false },
            },
            acceptType: {
              type: { name: 'arrayOf', value: { name: 'string' } },
              required: false,
              description: 'List of file types allowed to be uploaded.',
              defaultValue: { value: '["jpg", "gif", "png"]', computed: false },
            },
          },
        },
      ],
    },
    key: 'imageInput',
    name: '@autoit/imageInput',
    packageName: '@autoit/imageInput',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: {
      'react-images-uploading': '^3.0.1',
      'styled-components': '^5.1.1',
    },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/plugin-transform-runtime': '^7.2.0',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
    },
  },

  input: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'input' */ '@autoit/input/dist/docs'),
    readme: () => raw('../node_modules/@autoit/input/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/input',
      props: [
        {
          description: '',
          displayName: 'InputFieldComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The id attribute for the DOM.',
            },
            label: {
              type: { name: 'string' },
              required: true,
              description: 'The field label.',
            },
            type: {
              type: {
                name: 'enum',
                value: [
                  { value: '"text"', computed: false },
                  { value: '"email"', computed: false },
                  { value: '"tel"', computed: false },
                  { value: '"number"', computed: false },
                  { value: '"password"', computed: false },
                ],
              },
              required: true,
              description:
                'The type attribute to pass through to the html input element.',
            },
            disabled: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field is disabled.',
              defaultValue: { value: 'false', computed: false },
            },
            focus: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field is focused.',
              defaultValue: { value: 'false', computed: false },
            },
            touched: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field has been interacted with.',
              defaultValue: { value: 'false', computed: false },
            },
            maxLength: {
              type: { name: 'string' },
              required: false,
              description:
                'The max-length attribute to pass through to the html input element.',
              defaultValue: { value: 'null', computed: false },
            },
            hover: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field is in a hover state.',
              defaultValue: { value: 'false', computed: false },
            },
            onMouseEnter: {
              type: { name: 'func' },
              required: false,
              description:
                'A callback function for the onMouseEnter DOM event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onMouseLeave: {
              type: { name: 'func' },
              required: false,
              description:
                'A callback function for the onMouseLeave DOM event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onKeyPress: {
              type: { name: 'func' },
              required: false,
              description: 'A callback function for the onKeyPress DOM event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            beforeField: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the beginning of the input field.',
              defaultValue: { value: 'null', computed: false },
            },
            afterField: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the end of the input field.',
              defaultValue: { value: 'null', computed: false },
            },
            beforeLabel: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the beginning of the input label.',
              defaultValue: { value: 'null', computed: false },
            },
            afterLabel: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the end of the input label.',
              defaultValue: { value: 'null', computed: false },
            },
            information: {
              type: { name: 'string' },
              required: false,
              description:
                'A form of the information-wrapper component that shows the information between the label and the input, if this is populated it will be enabled.',
              defaultValue: { value: '""', computed: false },
            },
            informationPosition: {
              type: {
                name: 'enum',
                value: [
                  { value: '"beforeField"', computed: false },
                  { value: '"afterField"', computed: false },
                  { value: '"beforeLabel"', computed: false },
                  { value: '"afterLabel"', computed: false },
                ],
              },
              required: false,
              description:
                'The location of the information-wrapper icon that toggles the display of the extra info.',
              defaultValue: { value: '"afterField"', computed: false },
            },
            size: {
              type: {
                name: 'enum',
                value: [
                  { value: '"small"', computed: false },
                  { value: '"regular"', computed: false },
                  { value: '"large"', computed: false },
                ],
              },
              required: false,
              description:
                'The size of the field, matches up with buttons and other input fields. Small is for saving space in complex interfaces, regular for most uses, and large for important fields that require more user attention.',
              defaultValue: { value: '"small"', computed: false },
            },
            variant: {
              type: {
                name: 'enum',
                value: [
                  { value: '"internal"', computed: false },
                  { value: '"external"', computed: false },
                ],
              },
              required: false,
              description:
                'Whether the field is from the internal or external UI kit.',
              defaultValue: { value: '"internal"', computed: false },
            },
            labelSize: {
              type: {
                name: 'enum',
                value: [
                  { value: '"regular"', computed: false },
                  { value: '"large"', computed: false },
                ],
              },
              required: false,
              description:
                'The size of the label, regular is for all uses within a form, large is for single field functions such as a Google style search box.',
              defaultValue: { value: '"regular"', computed: false },
            },
            placeholder: {
              type: { name: 'string' },
              required: false,
              description: 'The placeholder attribute of the input element.',
              defaultValue: { value: '""', computed: false },
            },
            name: {
              type: { name: 'string' },
              required: false,
              description:
                'When nested in FormSection, returns the name prop prefixed with the FormSection name. Otherwise, returns the name prop that you passed in.',
              defaultValue: { value: '""', computed: false },
            },
            onBlur: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field loses focus. It expects to either receive the React SyntheticEvent _or_ the current value of the field.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field is changed. It expects to either receive the React SyntheticEvent _or_ the new value of the field.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onFocus: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field receives focus.',
              defaultValue: { value: '() => {}', computed: false },
            },
            value: {
              type: { name: 'string' },
              required: false,
              description:
                'The value of this form field. It will be a boolean for checkboxes, and a string for all other input types.',
              defaultValue: { value: 'undefined', computed: true },
            },
            invalid: {
              type: { name: 'bool' },
              required: false,
              description: 'A boolean specifying if the input is invalid.',
              defaultValue: { value: 'false', computed: false },
            },
            error: {
              type: { name: 'string' },
              required: false,
              description:
                'An error message to display when the input is invalid.',
              defaultValue: { value: '""', computed: false },
            },
            subLabel: {
              type: {
                name: 'union',
                value: [{ name: 'string' }, { name: 'node' }],
              },
              required: false,
              description: 'A child or string to be displayed in the sublabel.',
              defaultValue: { value: 'null', computed: false },
            },
            className: {
              type: { name: 'string' },
              required: false,
              description: 'A custom classname to use for this component.',
              defaultValue: { value: '""', computed: false },
            },
            onKeyDown: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form receives a key up.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onKeyUp: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form receives a key down.',
              defaultValue: { value: '() => {}', computed: false },
            },
            inputRef: {
              type: { name: 'union', value: [{ name: 'func' }] },
              required: false,
              description: 'Reference to the actual input field',
              defaultValue: { value: 'null', computed: false },
            },
            required: {
              type: { name: 'bool' },
              required: false,
              description:
                "Specifies whether or not to display a '*' after the label",
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'input',
    name: '@autoit/input',
    packageName: '@autoit/input',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  loading: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'loading' */ '@autoit/loading/dist/docs'),
    readme: () => raw('../node_modules/@autoit/loading/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/loading',
      props: [
        {
          description: '',
          displayName: 'LoadingComponent',
          methods: [],
          props: {
            color: {
              type: { name: 'string' },
              required: false,
              description: 'Specifies the default color for the spinner',
              defaultValue: { value: 'Theme.Light.fontColor', computed: true },
            },
          },
        },
      ],
    },
    key: 'loading',
    name: '@autoit/loading',
    packageName: '@autoit/loading',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'react-loading': '^2.0.3', 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/plugin-transform-runtime': '^7.2.0',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
    },
  },

  modal: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'modal' */ '@autoit/modal/dist/docs'),
    readme: () => raw('../node_modules/@autoit/modal/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/modal',
      props: [
        {
          description: '',
          displayName: 'ModalComponent',
          methods: [],
          props: {
            maxWidth: {
              type: { name: 'string' },
              required: false,
              description: 'Maximum width of the modal container.',
              defaultValue: { value: "'768px'", computed: false },
            },
            isOpen: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the modal is open or not.',
              defaultValue: { value: 'false', computed: false },
            },
            id: {
              type: { name: 'string' },
              required: true,
              description:
                'The unique id of the element which is used for data-test-id.',
            },
            title: {
              type: { name: 'string' },
              required: true,
              description:
                'Title of the modal, required for accessibility purposes.',
            },
            showTitle: {
              type: { name: 'bool' },
              required: false,
              description: 'Render the title on the top of the modal',
              defaultValue: { value: 'true', computed: false },
            },
            showClose: {
              type: { name: 'bool' },
              required: false,
              description: 'Render the close on the top of the modal',
              defaultValue: { value: 'true', computed: false },
            },
            closeModal: {
              type: { name: 'func' },
              required: true,
              description:
                'A function to set isOpen to false in the HoC, modal id is passed back up.',
            },
            children: {
              type: {
                name: 'union',
                value: [
                  { name: 'element' },
                  { name: 'string' },
                  { name: 'arrayOf', value: { name: 'element' } },
                ],
              },
              required: true,
              description: 'Children must be one of the inner container types',
            },
            backdropClose: {
              type: { name: 'bool' },
              required: false,
              description:
                'Whether the modal is closed when the backdrop is clicked on.',
              defaultValue: { value: 'false', computed: false },
            },
            isDialog: {
              type: { name: 'bool' },
              required: false,
              description: 'Specification of if this is a dialog or not.',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'modal',
    name: '@autoit/modal',
    packageName: '@autoit/modal',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  pagination: {
    description: 'No description added',
    docs: () =>
      import(
        /* webpackChunkName: 'pagination' */ '@autoit/pagination/dist/docs'
      ),
    readme: () => raw('../node_modules/@autoit/pagination/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/pagination',
      props: [
        {
          description: '',
          displayName: 'PaginationComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The id attribute for the DOM.',
            },
            results: {
              type: {
                name: 'arrayOf',
                value: { name: 'custom', raw: 'PropTypes.shape' },
              },
              required: true,
              description:
                'The results array to paginate over, only required for utility purposes of determining length.',
            },
            currentPage: {
              type: { name: 'number' },
              required: false,
              description:
                'The current page to display in base 1 numbering format.',
              defaultValue: { value: '1', computed: false },
            },
            updatePage: {
              type: { name: 'func' },
              required: true,
              description:
                'A function passed in to update the section of the results shown by clicking on an action within pagination.',
            },
            perPage: {
              type: { name: 'number' },
              required: false,
              description: 'How many results are shown per page.',
              defaultValue: { value: '10', computed: false },
            },
            neighbours: {
              type: { name: 'number' },
              required: false,
              description:
                'The amount of pages to show either side of the currently selected page.',
              defaultValue: { value: '2', computed: false },
            },
          },
        },
      ],
    },
    key: 'pagination',
    name: '@autoit/pagination',
    packageName: '@autoit/pagination',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  progressBar: {
    description: 'No description added',
    docs: () =>
      import(
        /* webpackChunkName: 'progressBar' */ '@autoit/progressBar/dist/docs'
      ),
    readme: () => raw('../node_modules/@autoit/progressBar/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/progressBar',
      props: [
        {
          description: '',
          displayName: 'ProgressBarComponent',
          methods: [],
          props: {
            progressSteps: {
              type: {
                name: 'arrayOf',
                value: {
                  name: 'shape',
                  value: {
                    title: {
                      name: 'string',
                      description:
                        'The text displayed at laptop and desktop widths in the progress step.',
                      required: true,
                    },
                    href: {
                      name: 'string',
                      description:
                        'A URL to link to from the progress step if required.',
                      required: false,
                    },
                    children: {
                      name: 'union',
                      value: [{ name: 'func' }, { name: 'node' }],
                      description: 'What to display when this is active.',
                      required: false,
                    },
                  },
                },
              },
              required: true,
              description:
                'An array of breadcrumbs to show in the progress bar.',
            },
            maxWidth: {
              type: {
                name: 'enum',
                value: [
                  { value: '"320"', computed: false },
                  { value: '"480"', computed: false },
                  { value: '"768"', computed: false },
                  { value: '"980"', computed: false },
                  { value: '"1164"', computed: false },
                  { value: '"1366"', computed: false },
                  { value: '"auto"', computed: false },
                ],
              },
              required: false,
              description:
                'The maximum width of the underlying grid within the masthead child components, offsets the icons and any content while keeping the background spanning 100% of its container.',
              defaultValue: { value: '"auto"', computed: false },
            },
            startAt: {
              type: { name: 'number' },
              required: false,
              description:
                'Which step to start at. Defaults to 0 (first step.)',
              defaultValue: { value: '0', computed: false },
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description:
                'A function that gets called with the current page number as the parameter',
              defaultValue: { value: '() => {}', computed: false },
            },
            changeOnClick: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to change the page when the child is clicked...',
              defaultValue: { value: 'false', computed: false },
            },
            disableNext: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to disable the next button or not.',
              defaultValue: { value: 'false', computed: false },
            },
            disablePrev: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to disable the previous button or not.',
              defaultValue: { value: 'false', computed: false },
            },
            currentPage: {
              type: { name: 'number' },
              required: false,
              description:
                'The current page to display. This can be used if you are changing the pages elsewhere.',
              defaultValue: { value: '0', computed: false },
            },
            hideButtons: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to hide the buttons or not. This should be used when you specify the current page manually.',
              defaultValue: { value: 'false', computed: false },
            },
            hidePrev: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to hide the Previous button or not.',
              defaultValue: { value: 'false', computed: false },
            },
            hideNext: {
              type: { name: 'bool' },
              required: false,
              description: 'Specifies whether to hide the Next button or not.',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'progressBar',
    name: '@autoit/progressBar',
    packageName: '@autoit/progressBar',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  sections: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'sections' */ '@autoit/sections/dist/docs'),
    readme: () => raw('../node_modules/@autoit/sections/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/sections',
      props: [
        {
          description: '',
          displayName: 'SectionComponent',
          methods: [],
          props: {
            number: {
              type: { name: 'number' },
              required: true,
              description:
                'The section number to be displayed before the title.',
            },
            children: {
              type: { name: 'node' },
              required: true,
              description: 'The children to be displayed inside the section.',
            },
            title: {
              type: { name: 'string' },
              required: true,
              description:
                'The title to be displayed after the section number.',
            },
          },
        },
      ],
    },
    key: 'sections',
    name: '@autoit/sections',
    packageName: '@autoit/sections',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  statusImage: {
    description: 'No description added',
    docs: () =>
      import(
        /* webpackChunkName: 'statusImage' */ '@autoit/statusImage/dist/docs'
      ),
    readme: () => raw('../node_modules/@autoit/statusImage/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/statusImage',
      props: [
        {
          description: '',
          displayName: 'StatusImageComponent',
          methods: [],
          props: {
            name: {
              type: {
                name: 'enum',
                value: [
                  { value: "'construction'", computed: false },
                  { value: "'nothing'", computed: false },
                  { value: "'search'", computed: false },
                  { value: "'find'", computed: false },
                  { value: "'404'", computed: false },
                ],
              },
              required: true,
              description: 'The name of the image you wish to display.',
            },
          },
        },
      ],
    },
    key: 'statusImage',
    name: '@autoit/statusImage',
    packageName: '@autoit/statusImage',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  switch: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'switch' */ '@autoit/switch/dist/docs'),
    readme: () => raw('../node_modules/@autoit/switch/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/switch',
      props: [
        {
          description: '',
          displayName: 'SwitchComponent',
          methods: [],
          props: {
            checked: {
              type: { name: 'bool' },
              required: true,
              description: 'Specifies whether or not the slider is on...',
            },
            onChange: {
              type: { name: 'func' },
              required: true,
              description:
                'Specifies a function to call when the value is changed',
            },
          },
        },
      ],
    },
    key: 'switch',
    name: '@autoit/switch',
    packageName: '@autoit/switch',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  table: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'table' */ '@autoit/table/dist/docs'),
    readme: () => raw('../node_modules/@autoit/table/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/table',
      props: [
        {
          description: '',
          displayName: 'TableComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: false,
              description: 'The test data id for the table',
              defaultValue: { value: '"table"', computed: false },
            },
            headers: {
              type: { name: 'arrayOf', value: { name: 'string' } },
              required: false,
              description:
                'The headers to be displayed at the top of the table.',
              defaultValue: { value: '[]', computed: false },
            },
            rows: {
              type: {
                name: 'arrayOf',
                value: { name: 'shape', value: '', computed: true },
              },
              required: false,
              description:
                "The list of rows to be displayed in the table.\nEach Object in the list must have a key-value pairs that relate to the headers. The name of the keys aren't important.",
              defaultValue: { value: '[]', computed: false },
            },
            values: {
              type: {
                name: 'arrayOf',
                value: { name: 'shape', value: '', computed: true },
              },
              required: false,
              description:
                'The list of values to be used when a row is clicked.\nEach Object in the list must have the values you wish to use when the row is clicked. The row data will also be included in the `row` key.\nSo try not to use that key.',
              defaultValue: { value: '[]', computed: false },
            },
            actions: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether to add the actions row and header.',
              defaultValue: { value: 'false', computed: false },
            },
            onClick: {
              type: { name: 'func' },
              required: true,
              description:
                'Callback function for when a row is clicked. Except the action components.',
            },
            limit: {
              type: {
                name: 'enum',
                value: [
                  { value: '5', computed: false },
                  { value: '10', computed: false },
                  { value: '20', computed: false },
                  { value: '50', computed: false },
                  { value: '100', computed: false },
                ],
              },
              required: false,
              description:
                'The limit of rows to display per page. If nothing is set, all the rows will be displayed.',
              defaultValue: { value: 'undefined', computed: true },
            },
            currentPage: {
              type: { name: 'number' },
              required: false,
              description: 'The current page we are starting on...',
              defaultValue: { value: '1', computed: false },
            },
            sortedBy: {
              type: { name: 'string' },
              required: false,
              description: 'The column the table is presently sorted by.',
              defaultValue: { value: '""', computed: false },
            },
            sortOrder: {
              type: { name: 'string' },
              required: false,
              description: 'Ascending or descending sort order on the table.',
              defaultValue: { value: '""', computed: false },
            },
            hideSearch: {
              type: { name: 'bool' },
              required: false,
              description:
                'Specifies whether to hide the search button or not.',
              defaultValue: { value: 'false', computed: false },
            },
          },
        },
      ],
    },
    key: 'table',
    name: '@autoit/table',
    packageName: '@autoit/table',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { lodash: '^4.17.20', 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/plugin-transform-runtime': '^7.2.0',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
    },
  },

  text: {
    description: 'No description added',
    docs: () => import(/* webpackChunkName: 'text' */ '@autoit/text/dist/docs'),
    readme: () => raw('../node_modules/@autoit/text/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/text',
      props: [
        { description: '', displayName: 'HeaderComponent', methods: [] },
        { description: '', displayName: 'SubHeaderComponent', methods: [] },
        { description: '', displayName: 'LabelComponent', methods: [] },
        { description: '', displayName: 'LogoComponent', methods: [] },
        {
          description: '',
          displayName: 'TextComponent',
          methods: [],
          props: {
            type: {
              type: {
                name: 'enum',
                value: [
                  { value: "'heading'", computed: false },
                  { value: "'subheader'", computed: false },
                  { value: "'label'", computed: false },
                  { value: "'logo'", computed: false },
                ],
              },
              required: false,
              description: '',
              defaultValue: { value: "''", computed: false },
            },
            text: {
              type: {
                name: 'custom',
                raw:
                  "(props, propName, componentName) => {\n    if (!props.text && !props.children) {\n        return new Error(\n            `One of the props 'text' or 'children' was not specified in ${componentName}.`\n        );\n    }\n    return true;\n}",
              },
              required: false,
              description: 'Text to be displayed.',
            },
            children: {
              type: {
                name: 'custom',
                raw:
                  "(props, propName, componentName) => {\n    if (!props.text && !props.children) {\n        return new Error(\n            `One of the props 'text' or 'children' was not specified in ${componentName}.`\n        );\n    }\n    return true;\n}",
              },
              required: false,
              description: 'Children to be placed inside the text element.',
            },
          },
        },
      ],
    },
    key: 'text',
    name: '@autoit/text',
    packageName: '@autoit/text',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  textArea: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'textArea' */ '@autoit/textArea/dist/docs'),
    readme: () => raw('../node_modules/@autoit/textArea/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/textArea',
      props: [
        {
          description: '',
          displayName: 'TextAreaComponent',
          methods: [],
          props: {
            id: {
              type: { name: 'string' },
              required: true,
              description: 'The id attribute for the DOM.',
            },
            label: {
              type: { name: 'string' },
              required: true,
              description: 'The label for the textarea field.',
            },
            disabled: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the Textarea is in a disabled state.',
              defaultValue: { value: 'false', computed: false },
            },
            placeholder: {
              type: { name: 'string' },
              required: false,
              description: 'Optional Placeholder',
              defaultValue: { value: "''", computed: false },
            },
            focus: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field is focused.',
              defaultValue: { value: 'false', computed: false },
            },
            touched: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field has been interacted with.',
              defaultValue: { value: 'false', computed: false },
            },
            maxLength: {
              type: { name: 'string' },
              required: false,
              description: 'Optional max length of the textarea field',
              defaultValue: { value: "''", computed: false },
            },
            hover: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the field has hovered.',
              defaultValue: { value: 'false', computed: false },
            },
            value: {
              type: { name: 'string' },
              required: false,
              description: 'The current value of the field.',
              defaultValue: { value: 'undefined', computed: true },
            },
            onMouseEnter: {
              type: { name: 'func' },
              required: false,
              description: 'Callback function from mouseEnter event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onMouseLeave: {
              type: { name: 'func' },
              required: false,
              description: 'Callback function from mouseLeave event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onKeyPress: {
              type: { name: 'func' },
              required: false,
              description: 'Callback function from keyPress event.',
              defaultValue: { value: '() => {}', computed: false },
            },
            beforeField: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the beginning of the input field.',
              defaultValue: { value: 'null', computed: false },
            },
            afterField: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the end of the input field.',
              defaultValue: { value: 'null', computed: false },
            },
            beforeLabel: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the beginning of the input label.',
              defaultValue: { value: 'null', computed: false },
            },
            afterLabel: {
              type: { name: 'node' },
              required: false,
              description:
                'A React component to put within the end of the input label.',
              defaultValue: { value: 'null', computed: false },
            },
            information: {
              type: { name: 'string' },
              required: false,
              description: 'Information text',
              defaultValue: { value: "''", computed: false },
            },
            informationPosition: {
              type: {
                name: 'enum',
                value: [
                  { value: "'beforeField'", computed: false },
                  { value: "'afterField'", computed: false },
                  { value: "'beforeLabel'", computed: false },
                  { value: "'afterLabel'", computed: false },
                ],
              },
              required: false,
              description:
                'Information Icon placement\nbeforeField: Icon appears before the field\nafterField: Icon appears after the field\nbeforeLabel: Icon appears prefix to label\nafterLabel: Icon appears suffix to label',
              defaultValue: { value: "'afterField'", computed: false },
            },
            resize: {
              type: {
                name: 'enum',
                value: [
                  { value: "'none'", computed: false },
                  { value: "'horizontal'", computed: false },
                  { value: "'vertical'", computed: false },
                  { value: "'both'", computed: false },
                ],
              },
              required: false,
              description:
                'Resizing options of the textarea\nnone: Textarea cannot be resized.\nhorizontal: Textarea can only be horizontal resized.\nvertial: Textarea can only be vertical resized.\nboth: Textarea can be resized either positions.',
              defaultValue: { value: "'both'", computed: false },
            },
            size: {
              type: {
                name: 'enum',
                value: [
                  { value: "'small'", computed: false },
                  { value: "'regular'", computed: false },
                  { value: "'large'", computed: false },
                  { value: "'extra-large'", computed: false },
                ],
              },
              required: false,
              description:
                'Sizing options of the textarea field\nsmall: Applies `height: 38px` to the textarea.\nregular: Applies `height: 60px;padding: 0 18px` to the textarea.\nlarge: Applies `height: 44px;` to the textarea.\nextra-large: Applies `height: 76px;padding: 0 18px ` to the textarea.',
              defaultValue: { value: "'small'", computed: false },
            },
            variant: {
              type: {
                name: 'enum',
                value: [
                  { value: "'internal'", computed: false },
                  { value: "'external'", computed: false },
                ],
              },
              required: false,
              description:
                'Label color variant options\ninternal: Applies `granite` color to the Label.\nexternal: Applies `#494949: color to the Label.',
              defaultValue: { value: "'internal'", computed: false },
            },
            labelSize: {
              type: {
                name: 'enum',
                value: [
                  { value: "'regular'", computed: false },
                  { value: "'large'", computed: false },
                ],
              },
              required: false,
              description:
                "Label font size options\nregular: Applies 'font-size:16px' to the Label.\nlarge: Applies 'font-size:22px' to the Label.",
              defaultValue: { value: "'regular'", computed: false },
            },
            type: {
              type: {
                name: 'enum',
                value: [
                  { value: "'text'", computed: false },
                  { value: "'email'", computed: false },
                  { value: "'tel'", computed: false },
                  { value: "'number'", computed: false },
                  { value: "'password'", computed: false },
                ],
              },
              required: false,
              description:
                'The type attribute to pass through to the html input element.',
              defaultValue: { value: "'text'", computed: false },
            },
            onFocus: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form field receives focus.',
              defaultValue: { value: '() => {}', computed: false },
            },
            subLabel: {
              type: {
                name: 'union',
                value: [{ name: 'string' }, { name: 'node' }],
              },
              required: false,
              description: 'A child or string to be displayed in the sublabel.',
              defaultValue: { value: "''", computed: false },
            },
            className: {
              type: { name: 'string' },
              required: false,
              description: 'A custom classname to use for this component.',
              defaultValue: { value: "''", computed: false },
            },
            onKeyDown: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form receives a key up.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onKeyUp: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the form receives a key down.',
              defaultValue: { value: '() => {}', computed: false },
            },
            onBlur: {
              type: { name: 'func' },
              required: false,
              description: 'A function to call when the form is blurred.',
              defaultValue: { value: '() => {}', computed: false },
            },
            name: {
              type: { name: 'string' },
              required: false,
              description: 'A name for the component.',
              defaultValue: { value: "''", computed: false },
            },
            onChange: {
              type: { name: 'func' },
              required: false,
              description:
                'A function to call when the value of the form is changed.',
              defaultValue: { value: '() => {}', computed: false },
            },
            invalid: {
              type: { name: 'bool' },
              required: false,
              description: 'A boolean specifying if the input is invalid.',
              defaultValue: { value: 'false', computed: false },
            },
            error: {
              type: { name: 'string' },
              required: false,
              description:
                'An error message to display when the input is invalid.',
              defaultValue: { value: "''", computed: false },
            },
          },
        },
      ],
    },
    key: 'textArea',
    name: '@autoit/textArea',
    packageName: '@autoit/textArea',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },

  toast: {
    description: 'No description added',
    docs: () =>
      import(/* webpackChunkName: 'toast' */ '@autoit/toast/dist/docs'),
    readme: () => raw('../node_modules/@autoit/toast/README.md'),
    changelog: undefined,
    props: undefined,
    key: 'toast',
    name: '@autoit/toast',
    packageName: '@autoit/toast',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'react-toastify': '^6.0.8', 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/plugin-transform-runtime': '^7.2.0',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
    },
  },

  validation: {
    description: 'No description added',
    docs: () =>
      import(
        /* webpackChunkName: 'validation' */ '@autoit/validation/dist/docs'
      ),
    readme: () => raw('../node_modules/@autoit/validation/README.md'),
    changelog: undefined,
    props: {
      name: '@autoit/validation',
      props: [
        {
          description: '',
          displayName: 'ValidationComponent',
          methods: [],
          props: {
            show: {
              type: { name: 'bool' },
              required: false,
              description: 'Whether the message is shown.',
              defaultValue: { value: 'false', computed: false },
            },
            testId: {
              type: { name: 'string' },
              required: true,
              description: 'The data-test-id attribute on the html element.',
            },
            message: {
              type: { name: 'string' },
              required: true,
              description: 'The validation message itself.',
            },
          },
        },
      ],
    },
    key: 'validation',
    name: '@autoit/validation',
    packageName: '@autoit/validation',
    maintainers: [],
    isPublished: 'undefined',
    publishedDate: 'undefined',
    version: '1.0.1',
    supportsDarkMode: false,
    packageHasBeenMoved: false,
    dependencies: { 'styled-components': '^5.1.1' },
    peerDependencies: {
      'prop-types': '^15.7.1',
      react: '^16.8.1',
      'styled-components': '^4.1.1',
    },
    devDependencies: {
      enzyme: '^3.7.0',
      'enzyme-adapter-react-16': '^1.9.1',
      'enzyme-to-json': '^3.3.4',
      jest: '^23.6.0',
      'jest-styled-components': '^6.3.1',
      '@babel/plugin-proposal-class-properties': '^7.10.4',
      '@babel/plugin-proposal-nullish-coalescing-operator': '^7.10.4',
      '@babel/plugin-proposal-optional-chaining': '^7.11.0',
      '@babel/plugin-proposal-private-methods': '^7.10.4',
      '@babel/plugin-syntax-bigint': '^7.8.3',
      '@babel/cli': '^7.2.3',
      '@babel/core': '^7.4.5',
      '@babel/node': '^7.2.2',
      '@babel/preset-env': '^7.4.5',
      '@babel/preset-react': '^7.0.0',
      '@babel/register': '^7.0.0',
      '@babel/plugin-transform-runtime': '^7.2.0',
      'babel-plugin-lodash': '^3.3.4',
      'babel-plugin-macros': '^2.4.2',
      'babylon-options': '^2.0.1',
    },
  },
};

export default components;
